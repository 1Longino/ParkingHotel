/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hotel_estacionamiento;
import hotel_estacionamiento.Conexion_MYSQL;
import java.sql.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
public class Asignar_Estacionamiento extends javax.swing.JPanel {

    Conexion_MYSQL conexion;
    ResultSet res;    // SE UTILIZA PARA REALIZAR CONSULTAR DESDE EL SERVIDOR 
    Alta_Vehiculo av;      //OTJETO DECLARADO DE LA CLASE ALTA VEHICULO PARA INVOCAR EL NOMBRE DEL USUARIO LOGEADO
    
    ///EL CONSTRUCUTOR TIENE COMO PARAMETROS EL NOMBRE DE LA VARIABLE PARA OBTENER EL NOMBRE DEL EMPLEADO LA CUAL LO CONTIENE LA OTRA CLASE
    public Asignar_Estacionamiento(String empleadologeado) {   
        initComponents();
        Obtener_Clientes();        //INVOCACION DEL METODO OBTENER CLIENTES PARA LLENAR EL RESPECTIVO COMBO
        Obtener_Reservaciones();     //INVOCACION DE METODO OBTENER RESERVACIONES PARA LLENAR EL COMBO
        cmbempleado.addItem(empleadologeado);       ///SE LE AGREGA LA VARIABLE OBTENIDA DE LA CLASE ALTA VEHICULO
        
        //CREACION DE LA TABLA PARA MOSTRAR LOS DATOS DE LA ASIGNA ESTACIONAMIENTO
         try {
            DefaultTableModel modelo = new DefaultTableModel();
            tabla_asigna_estacionamiento.setModel(modelo);

            PreparedStatement ps = null;
            ResultSet rs = null;
            Conexion conn = new Conexion();
            Connection con = conn.getConexion();
            
            
            String sql = "select ae.id_asigna_estacionamiento,e.lugar,ae.empleado,c.nombre,a.matricula,ar.clave_reservacion "
                    + "from Asigna_estacionamiento ae,Estacionamiento e,Clientes c,Autos a,Asigna_reservaciones ar "
                    + "where e.id_estacionamiento=ae.id_estacionamiento and c.id_cliente=ae.id_cliente and a.id_auto=ae.id_auto and ar.id_asigna_reservacion=ae.id_asigna_reservacion;";
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();

            ResultSetMetaData rsMd = (ResultSetMetaData) rs.getMetaData();
            int cantidadColumnas = rsMd.getColumnCount();

            modelo.addColumn("Id Asig Est");
            modelo.addColumn("Lugar");
            modelo.addColumn("Empleado");
            modelo.addColumn("Cliente");
            modelo.addColumn("Matricula Auto");
            modelo.addColumn("Clave Reservación");

            
            int[] anchos = {70, 70, 70,70};
            for (int i = 0; i < tabla_asigna_estacionamiento.getColumnCount(); i++) {
//                tabla_alta_vehiculo.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
            }

            while (rs.next()) {
                Object[] filas = new Object[cantidadColumnas];
                for (int i = 0; i < cantidadColumnas; i++) {
                    filas[i] = rs.getObject(i + 1);
                }
                modelo.addRow(filas);
            }

        } catch (SQLException ex) {
            System.err.println(ex.toString());
        }
         
        //CODIGO PARA SELECCIONAR LOS LUGARES DISPONIBLES EN ESTACIONAMIENTO Y ASI LLENAR EL COMBO DE LUGAR
        conexion=new Conexion_MYSQL();
        try
        {
            res=conexion.consultar("SELECT lugar FROM Estacionamiento where estado='0'");
            
            while(res.next())
            {
                cmblugar.addItem(res.getString("lugar"));
            }
        }
        catch(Exception e)
        {
            System.out.println("Error"+e.getMessage());
        }
        conexion.salir();
        
        
        // CODIGO PARA OBTENER LAS MATRICULAS REGISTRAS EN LA TABLA AUTOS Y  ASI AGREGARLAS AL COMBO DE MATRICULAS
        conexion=new Conexion_MYSQL();
        try
        {
            res=conexion.consultar("SELECT matricula FROM Autos ORDER BY matricula");
            
            while(res.next())
            {
                cmbmatricula.addItem(res.getString("matricula"));
            }
        }
        catch(Exception e)
        {
            System.out.println("Error"+e.getMessage());
        }
        conexion.salir();
    
        
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cmbclavereservacion = new javax.swing.JComboBox<>();
        cmbmatricula = new javax.swing.JComboBox<>();
        cmbcliente = new javax.swing.JComboBox<>();
        cmblugar = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        cmbempleado = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_asigna_estacionamiento = new javax.swing.JTable();
        btnactualizar = new javax.swing.JButton();
        txteliminar = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();

        jLabel1.setText("Asignar Lugar en Estacionamiento");

        jLabel2.setText("Lugar");

        jLabel3.setText("Empleado");

        jLabel4.setText("Cliente");

        jLabel5.setText("Matricula Vehiculo");

        jLabel6.setText("Clave Reservación");

        cmbclavereservacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecciona Clave Reservacion" }));

        cmbmatricula.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecciona Matricula" }));
        cmbmatricula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbmatriculaActionPerformed(evt);
            }
        });

        cmbcliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecciona Cliente" }));
        cmbcliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbclienteActionPerformed(evt);
            }
        });

        cmblugar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar Lugar" }));
        cmblugar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmblugarActionPerformed(evt);
            }
        });

        jButton1.setText("Agregar Vehículo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        cmbempleado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecciona" }));
        cmbempleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbempleadoActionPerformed(evt);
            }
        });

        jLabel8.setText("Registro Actual de Vehíulos  en  Estacionamiento");

        tabla_asigna_estacionamiento.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Id Asig Est", "Lugar", "Empleado", "Cliente", "Matricula Auto", "Clave Reservación"
            }
        ));
        jScrollPane1.setViewportView(tabla_asigna_estacionamiento);

        btnactualizar.setText("Actualizar Datos");
        btnactualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnactualizarActionPerformed(evt);
            }
        });

        jButton2.setText("Eliminar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbmatricula, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbcliente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmblugar, 0, 164, Short.MAX_VALUE)
                            .addComponent(cmbempleado, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbclavereservacion, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnactualizar)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txteliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(248, 248, 248)
                        .addComponent(jLabel8))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 602, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(89, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jLabel7))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txteliminar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton2)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(cmblugar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(cmbempleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbcliente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cmbmatricula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(cmbclavereservacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(btnactualizar))))
                .addContainerGap(29, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbclienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbclienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbclienteActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         //PARA EL BOTON DE INSERCIÓN, LO PRIMERO ES CONFIRMAS QUE TODOS LOS COMBOS NO ESTEN VACIOS, SI LO ESTAN ENVIAR MENSAJE DE ERROR SI NO REALIZAR LAS ACCIONES
        if(cmblugar.getSelectedIndex()==0 || cmbcliente.getSelectedIndex()==0 || cmbmatricula.getSelectedIndex()==0 || cmbclavereservacion.getSelectedIndex()==0 || cmbempleado.getSelectedIndex()==0)
           JOptionPane.showMessageDialog(null,"Selecciona todos los campos ","Error",JOptionPane.ERROR_MESSAGE);
        else
        {
           
            conexion=new Conexion_MYSQL();  //CREACION DE OBJETO DE LA CLASE CONEXION PARA REALIZAR BUSQUEDAS, INSERCIONES Y ELIMINACIONES
            
            /*
            String id_estacionamiento="";
            String id_cliente="";
            String id_auto="";
            String id_asigna_reservacion="";
            */
            
            String empleado="";
            empleado=cmbempleado.getSelectedItem().toString();

            int i=0;
            boolean band=false;
          
            if(band==false)
            {
                /*
                try
                {
                    res=conexion.consultar("SELECT id_estacionamiento FROM Estacionamiento WHERE lugar='"
                        +cmblugar.getSelectedItem().toString()+"'");

                    while(res.next())
                    {
                        id_estacionamiento=res.getString("id_estacionamiento");
                    }
                }
                catch(Exception e)
                {
                    //System.out.println("Error: "+e.getMessage());
                }
                
                
                 try
                {
                    res=conexion.consultar("SELECT id_cliente FROM Clientes WHERE nombre='"
                        +cmbcliente.getSelectedItem().toString()+"'");

                    while(res.next())
                    {
                        id_cliente=res.getString("id_cliente");
                    }
                }
                catch(Exception e)
                {
                   // System.out.println("Error: "+e.getMessage());
                }
                 
                 
                  try
                {
                    res=conexion.consultar("SELECT id_auto FROM Autos WHERE matricula='"
                        +cmbmatricula.getSelectedItem().toString()+"'");

                    while(res.next())
                    {
                        id_auto=res.getString("id_auto");
                    }
                }
                catch(Exception e)
                {
                   // System.out.println("Error: "+e.getMessage());
                }
                  
                  
                  
                   try
                {
                    res=conexion.consultar("SELECT id_asigna_reservacion FROM Asigna_reservaciones WHERE clave_reservacion='"
                        +cmbclavereservacion.getSelectedItem().toString()+"'");

                    while(res.next())
                    {
                        id_asigna_reservacion=res.getString("id_asigna_reservacion");
                    }
                }
                catch(Exception e)
                {
                   // System.out.println("Error: "+e.getMessage());
                }
                */
                //REALIZACION DEL QUERY PARA INSERCION LO QUE SE ESTA REALIZANDO ES SOLO LLAMAR AL PROCEDURE QUE REALIZA
                //CIERTA ACCION Y ENVIAR SOLO LOS DATOS QUE VA A RECIBIR LOS PARAMETROS EN EL PROCEDURE
                String SQL="call  inserta_asigna_Estacionamiento(0,"+cmblugar.getSelectedItem()+","
                        + "'"+cmbempleado.getSelectedItem().toString()+"','"+cmbcliente.getSelectedItem().toString()+"',"
                        + "'"+cmbmatricula.getSelectedItem().toString()+"','"+cmbclavereservacion.getSelectedItem()+"')";
                
                
                //AL REALIZAE UNA INSERCION CORRECTAMENTE LOS VALORES DE LOS COMBOS TIENE QUE VOLVER A SU INDICE 0 ES DECIR EL ITEM PARA ELEJIR OPCION
                cmblugar.setSelectedIndex(0);
                cmbempleado.setSelectedIndex(0);
                cmbcliente.setSelectedIndex(0);
                cmbmatricula.setSelectedIndex(0);
                cmbclavereservacion.setSelectedIndex(0);
                
                //ASI MISMO DESDEPUES DE INSERTAR LOS COMBOS DE MATRICULA SE TIENE QUE LIMPIAR YA QUE AL REALIZAR UNA NUEVA ACTUALIZACIÓN 
                //DEL COMBO SE IRAN AGRAGANDO LOS DATOS NUEVOS AL CÓDIGO
                
                
                cmblugar.removeAllItems();
                cmbmatricula.removeAllItems();
                
                conexion.Updates(SQL);
                
                System.out.println("Se ha realizado correctamente la siguiente sentencia :\n"+SQL+"\n\n");

                
            }
        }
        //EL CODIGO DE LA TABLA ASIGNA ESTACIONAMIENTO DENTRO DEL BOTON INGRESAR ES PARA MOSTRAR EL NUEVO REGISTRO QUE SE A AGREGADO
         try {
            DefaultTableModel modelo = new DefaultTableModel();
            tabla_asigna_estacionamiento.setModel(modelo);

            PreparedStatement ps = null;
            ResultSet rs = null;
            Conexion conn = new Conexion();
            Connection con = conn.getConexion();
            
            //LA SIGUIENTE CONSULTA ES PARA MOSTRAR LOS DATOS RESPECTIVOS EN LA TABLA ASIGNA_ESTACIONAMIENTO
            String sql = "select ae.id_asigna_estacionamiento,e.lugar,ae.empleado,c.nombre,a.matricula,ar.clave_reservacion "
                    + "from Asigna_estacionamiento ae,Estacionamiento e,Clientes c,Autos a,Asigna_reservaciones ar "
                    + "where e.id_estacionamiento=ae.id_estacionamiento and c.id_cliente=ae.id_cliente and a.id_auto=ae.id_auto and ar.id_asigna_reservacion=ae.id_asigna_reservacion;";
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();

            ResultSetMetaData rsMd = (ResultSetMetaData) rs.getMetaData();
            int cantidadColumnas = rsMd.getColumnCount();
            //CODIGO PARA DAR NOMBRE A LAS COLUMNAS DE LA TABLA
            modelo.addColumn("Id Asig Est");
            modelo.addColumn("Lugar");
            modelo.addColumn("Empleado");
            modelo.addColumn("Cliente");
            modelo.addColumn("Matricula Auto");
            modelo.addColumn("Clave Reservación");

            
            int[] anchos = {70, 70, 70,70};
            for (int i = 0; i < tabla_asigna_estacionamiento.getColumnCount(); i++) {
//                tabla_alta_vehiculo.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
            }

            while (rs.next()) {
                Object[] filas = new Object[cantidadColumnas];
                for (int i = 0; i < cantidadColumnas; i++) {
                    filas[i] = rs.getObject(i + 1);
                }
                modelo.addRow(filas);
            }

        } catch (SQLException ex) {
            System.err.println(ex.toString());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cmbmatriculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbmatriculaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbmatriculaActionPerformed

    private void btnactualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnactualizarActionPerformed
        
        //AL PRESIONAR EL BOTON ACTUALIZAR NUEVAMENTE SE TIENEN QUE LLENAR EL COMBO LUGARES CON LA FINALIDAD 
        //DE QUE YA NO APAREZCA EL LUGAR EL CUAL SE ACABA DE INGRESAR UN AUTO 
        conexion=new Conexion_MYSQL();
        try
        {
            res=conexion.consultar("SELECT lugar FROM Estacionamiento where estado='0'");
            
            while(res.next())
            {
                cmblugar.addItem(res.getString("lugar"));
            }
        }
        catch(Exception e)
        {
            System.out.println("Error"+e.getMessage());
        }
        conexion.salir();
        
        
       
        conexion=new Conexion_MYSQL();
        try
        {
            res=conexion.consultar("SELECT matricula FROM Autos ORDER BY matricula");
            
            while(res.next())
            {
                cmbmatricula.addItem(res.getString("matricula"));
            }
        }
        catch(Exception e)
        {
            System.out.println("Error"+e.getMessage());
        }
        conexion.salir();
    
    }//GEN-LAST:event_btnactualizarActionPerformed

    private void cmbempleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbempleadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbempleadoActionPerformed

    private void cmblugarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmblugarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmblugarActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
     conexion=new Conexion_MYSQL();
        String SQL="call eliminar_AE("+txteliminar.getText()+")";    //LLAMAR AL PROCEDURE ELIMINAR AE, SOLO SE ENVIA EL ID YA QUE SOLO TIENE ESE PARAMETRO
        System.out.println("Se ha realizado correctamente la sentencia :\n"+SQL+"\n\n");
        conexion.Updates(SQL);
       
        txteliminar.setText("");
        
        
        //EL CODIGO ES PARA MOSTRAR LA TABLA CON DATOS, SIRVE PARA MOSTRAR Y ACTUALIZAR LA TABLA EN CADA ELIMINACION 
        try {
            DefaultTableModel modelo = new DefaultTableModel();
            tabla_asigna_estacionamiento.setModel(modelo);

            PreparedStatement ps = null;
            ResultSet rs = null;
            Conexion conn = new Conexion();
            Connection con = conn.getConexion();
            
            
            String sql = "select ae.id_asigna_estacionamiento,e.lugar,ae.empleado,c.nombre,a.matricula,ar.clave_reservacion "
                    + "from Asigna_estacionamiento ae,Estacionamiento e,Clientes c,Autos a,Asigna_reservaciones ar "
                    + "where e.id_estacionamiento=ae.id_estacionamiento and c.id_cliente=ae.id_cliente and a.id_auto=ae.id_auto and ar.id_asigna_reservacion=ae.id_asigna_reservacion;";
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();

            ResultSetMetaData rsMd = (ResultSetMetaData) rs.getMetaData();
            int cantidadColumnas = rsMd.getColumnCount();

            modelo.addColumn("Id Asig Est");
            modelo.addColumn("Lugar");
            modelo.addColumn("Empleado");
            modelo.addColumn("Cliente");
            modelo.addColumn("Matricula Auto");
            modelo.addColumn("Clave Reservación");

            
            int[] anchos = {70, 70, 70,70};
            for (int i = 0; i < tabla_asigna_estacionamiento.getColumnCount(); i++) {
//                tabla_alta_vehiculo.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
            }

            while (rs.next()) {
                Object[] filas = new Object[cantidadColumnas];
                for (int i = 0; i < cantidadColumnas; i++) {
                    filas[i] = rs.getObject(i + 1);
                }
                modelo.addRow(filas);
            }

        } catch (SQLException ex) {
            System.err.println(ex.toString());
        }
                                            
    }//GEN-LAST:event_jButton2ActionPerformed

    Login log;
     void Obtener_Clientes()
    {
        
        conexion=new Conexion_MYSQL();
        try
        {
            res=conexion.consultar("SELECT nombre FROM Clientes ORDER BY nombre");
            
            while(res.next())
            {
                cmbcliente.addItem(res.getString("nombre"));
            }
        }
        catch(Exception e)
        {
            System.out.println("Error"+e.getMessage());
        }
        conexion.salir();
    }
     
     /**METODO PARA LLENAR EL COMBO QUE CONTIENE LAS CLAVES DE LAS RESERVACIONES*/
      void Obtener_Reservaciones()
    {
        
        conexion=new Conexion_MYSQL();
        try
        {
            res=conexion.consultar("SELECT clave_reservacion FROM Asigna_reservaciones ORDER BY clave_reservacion");
            
            while(res.next())
            {
                cmbclavereservacion.addItem(res.getString("clave_reservacion"));
            }
        }
        catch(Exception e)
        {
            System.out.println("Error"+e.getMessage());
        }
        conexion.salir();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnactualizar;
    private javax.swing.JComboBox<String> cmbclavereservacion;
    private javax.swing.JComboBox<String> cmbcliente;
    private javax.swing.JComboBox<String> cmbempleado;
    private javax.swing.JComboBox<String> cmblugar;
    private javax.swing.JComboBox<String> cmbmatricula;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla_asigna_estacionamiento;
    private javax.swing.JTextField txteliminar;
    // End of variables declaration//GEN-END:variables
}
